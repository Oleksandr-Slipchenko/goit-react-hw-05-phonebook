{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactLis.js","components/Filter/Filter.js","App.js","index.js"],"names":["INITIAL_STATE","number","name","ContactForm","state","handleInputChange","e","target","value","setState","handleSubmit","preventDefault","onAdd","props","validateForm","id","uuid","resetForm","onCheckUnique","alert","this","onSubmit","type","onChange","Component","ContactListItem","onRemove","onClick","ContactsList","contacts","length","map","contact","Filter","filter","App","handleAddContact","newContact","handleCheckUnique","isExistContact","find","handleRemoveContact","handleFilterChange","getVisibleContacts","toLowerCase","includes","prevProps","prevState","localStorage","setItem","JSON","stringify","getItem","parsedContacts","parse","visibleContacts","ContactLis","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.007bd921.chunk.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { v4 as uuid } from 'uuid';\n\nconst INITIAL_STATE = {\n  number: '',\n  name: '',\n};\n\nclass ContactForm extends Component {\n  static propTypes = {\n    onAdd: PropTypes.func.isRequired,\n    onCheckUnique: PropTypes.func.isRequired,\n  };\n\n  state = INITIAL_STATE;\n\n  handleInputChange = e => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    const { onAdd } = this.props;\n    const isValidateForm = this.validateForm();\n    if (!isValidateForm) return;\n    onAdd({ id: uuid(), name, number });\n    this.resetForm();\n  };\n\n  validateForm = () => {\n    const { name, number } = this.state;\n    const { onCheckUnique } = this.props;\n    if (!name || !number) {\n      alert('Some field is empty');\n      return false;\n    }\n    return onCheckUnique(name);\n  };\n\n  resetForm = () => {\n    this.setState(INITIAL_STATE);\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          <p>\n            <b>Name</b>\n          </p>\n          <br />\n          <input\n            type=\"text\"\n            value={name}\n            name=\"name\"\n            onChange={this.handleInputChange}\n          />\n        </label>\n        <br />\n        <label>\n          <p>\n            <b>Number</b>\n          </p>\n          <br />\n          <input\n            type=\"tel\"\n            value={number}\n            name=\"number\"\n            onChange={this.handleInputChange}\n          />\n        </label>\n        <br />\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\n\nconst ContactListItem = ({ id, name, number, onRemove }) => {\n  return (\n    <li>\n      {name}: {number} <button onClick={() => onRemove(id)}>delete</button>\n    </li>\n  );\n};\n\nconst ContactsList = ({ contacts, onRemove }) => {\n  if (contacts.length === 0) return null;\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <ContactListItem key={contact.id} {...contact} onRemove={onRemove} />\n      ))}\n    </ul>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import PropTypes from 'prop-types';\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <input\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={({ target }) => onChange(target.value)}\n    />\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { Component } from 'react';\n\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  handleAddContact = newContact =>\n    this.setState(({ contacts }) => ({\n      contacts: [...contacts, newContact],\n    }));\n\n  handleCheckUnique = name => {\n    const { contacts } = this.state;\n    const isExistContact = !!contacts.find(contact => contact.name === name);\n    isExistContact && alert('Contact is already exist');\n    return !isExistContact;\n  };\n\n  handleRemoveContact = id => {\n    this.setState(({ contacts }) => ({\n      contacts: contacts.filter(contact => contact.id !== id),\n    }));\n  };\n\n  handleFilterChange = filter => this.setState({ filter });\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts)\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  }\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm\n          onAdd={this.handleAddContact}\n          onCheckUnique={this.handleCheckUnique}\n        />\n\n        <h2>Contacts</h2>\n        <Filter filter={filter} onChange={this.handleFilterChange} />\n        <ContactList\n          contacts={visibleContacts}\n          onRemove={this.handleRemoveContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// ReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}